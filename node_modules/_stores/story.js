var Reflux = require('reflux');
var Actions = require('_actions');
var ffService = require('_services/fanfiction');
var t = require('_i18n').t;

var csp = require('js-csp'),
    go = csp.go, chan = csp.chan,
    put = csp.put, take = csp.take;

//@todo factorize all the internal state ...
var storyStore = Reflux.createStore({
    init: function() {
        this.lastInput = null;
        this.fetching = false;
        this.story = {};
        this.lastError = '';
        this.listenTo(Actions.downloadStory, this.downloadStory);
    },
    downloadStory: function(_url) {
        this.lastInput = _url;
        this.lastError = '';
        this.fetching = true;
        this.trigger('fetching');

        var ch = ffService.check(_url);

        go(function*() {
            var val;
            while((val = yield take(ch)) !== csp.CLOSED) {
                switch (true) {
                    //error handling
                    case (val instanceof Error):
                        this.story = {};
                        this.fetching = false;
                        this.lastError = val.message;
                        this.trigger('error');
                        break;
                    case val.status === 'infos':
                        console.log(val.data);
                        this.story = val.data;
                        this.fetching = true;
                        this.lastError = '';
                        this.trigger('success');
                        //switch channel being listened to ... dunno if that's good
                        //LETS DO IT ANYWAYYY
                        ch = ffService.download(val.data);
                        break;
                    case val.status === 'progress':
                        //implement progress for chapters download
                        /*this.lastError = t.gettext('Successfully saved the story !');
                        this.fetching = false;
                        this.trigger('success');*/
                    case val.status === 'finished':
                        this.lastError = t.gettext('Successfully saved the story !');
                        this.fetching = false;
                        this.trigger('success');
                }
            }
        }.bind(this));
    },
    getStatus: function() {
        return {
            fetching: this.fetching,
            error: this.lastError,
            input: this.lastInput,
            story: this.story
        };
    }
});

module.exports = storyStore;
